/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/MDIApplication.java to edit this template
 */
package com.mycompany.bolsaempleo;

import com.mycompany.bolsaempleo.Clases.Aspirante;
import com.mycompany.bolsaempleo.Clases.Persona;
import java.awt.List;
import java.util.ArrayList;
import java.lang.reflect.Array;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author santi
 */
public class Results extends javax.swing.JFrame {

    /**
     * Creates new form visualApp
     */
    public Results() {
        initComponents();   
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        showAllButton = new javax.swing.JButton();
        showByName = new javax.swing.JButton();
        showByAge = new javax.swing.JButton();
        showByHigherExperience = new javax.swing.JButton();
        showByExperience = new javax.swing.JButton();
        showByProfession = new javax.swing.JButton();
        showByYounger = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        goBackButton = new javax.swing.JButton();
        hireButton = new javax.swing.JButton();
        deleteByAge = new javax.swing.JButton();
        showCompleteInfo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        text2 = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(450, 250));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lista de candidatos");
        jLabel1.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Use alguno de los siguientes botones para filtrar candidatos segun su opción");

        showAllButton.setText("Mostrar todos los candidatos");
        showAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAllButtonClicked(evt);
            }
        });
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });

        showByName.setText("Filtrar por nombre");
        showByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByNameActionPerformed(evt);
            }
        });

        showByAge.setText("Filtrar por edad");
        showByAge.setToolTipText("");
        showByAge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showByAgeClicked(evt);
            }
        });
        showByAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByAgeActionPerformed(evt);
            }
        });

        showByHigherExperience.setText("Filtrar aspirante con mayor experiencia");
        showByHigherExperience.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showByHigherExperienceMouseClicked(evt);
            }
        });
        showByHigherExperience.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByHigherExperienceActionPerformed(evt);
            }
        });

        showByExperience.setText("Filtrar por años de experiencia");
        showByExperience.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showByExperienceClicked(evt);
            }
        });
        showByExperience.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByExperienceActionPerformed(evt);
            }
        });

        showByProfession.setText("Filtrar por profesión");
        showByProfession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showByProfessionMouseClicked(evt);
            }
        });
        showByProfession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByProfessionActionPerformed(evt);
            }
        });

        showByYounger.setText("Filtrar aspirante más joven");
        showByYounger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showByYoungerMouseClicked(evt);
            }
        });
        showByYounger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showByYoungerActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Profesión", "Años de experiencia", "Edad", "Correo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        goBackButton.setText("Volver atrás");
        goBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                goBackButtonClicked(evt);
            }
        });
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        hireButton.setText("Contratar");
        hireButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hireButtonMouseClicked(evt);
            }
        });

        deleteByAge.setText("Eliminar aspirantes por experiencia");
        deleteByAge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteByAgeMouseClicked(evt);
            }
        });

        showCompleteInfo.setText("Mostrar información completa de aspirante");
        showCompleteInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showCompleteInfoMouseClicked(evt);
            }
        });

        text1.setColumns(20);
        text1.setRows(5);
        jScrollPane1.setViewportView(text1);

        text2.setColumns(20);
        text2.setRows(5);
        jScrollPane3.setViewportView(text2);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(176, 176, 176))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showByAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(368, 368, 368))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(showByName, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showByYounger, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 3, Short.MAX_VALUE)
                                        .addComponent(showByProfession, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(deleteByAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showByExperience, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showByHigherExperience, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(hireButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showCompleteInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showByExperience, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(showAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showByName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showByProfession, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(showByAge, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showByHigherExperience, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(showByYounger, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(deleteByAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hireButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(showCompleteInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showAllButtonActionPerformed

    private void showByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByNameActionPerformed
        
        String name = JOptionPane.showInputDialog("Ingrese el nombre y apellidos:");
        
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        
        for(int i=0; i < numberOfResults; i++){
            
            String nameToFind = array.get(i).name + " " + array.get(i).lastName;
            System.out.print(nameToFind + name);
            
            if(nameToFind.equals(name)){
                
            data[i][0] = String.valueOf(i);
            data[i][1] = array.get(i).name + " " + array.get(i).lastName;
            data[i][2] = array.get(i).profession;
            data[i][3] = array.get(i).yearsOfExperience;
            data[i][4] = array.get(i).age;
            data[i][5] = array.get(i).email;
            
            }
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
        
    }//GEN-LAST:event_showByNameActionPerformed

    private void showByAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showByAgeActionPerformed

    private void showByHigherExperienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByHigherExperienceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showByHigherExperienceActionPerformed

    private void showByExperienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByExperienceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showByExperienceActionPerformed

    private void showByProfessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByProfessionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showByProfessionActionPerformed

    private void showByYoungerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showByYoungerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showByYoungerActionPerformed

    private void showAllButtonClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAllButtonClicked
       
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        
        for(int i=0; i < numberOfResults; i++){
            data[i][0] = String.valueOf(i);
            data[i][1] = array.get(i).name + " " + array.get(i).lastName;
            data[i][2] = array.get(i).profession;
            data[i][3] = array.get(i).yearsOfExperience;
            data[i][4] = array.get(i).age;
            data[i][5] = array.get(i).email;
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
    }//GEN-LAST:event_showAllButtonClicked

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void goBackButtonClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_goBackButtonClicked
        this.setVisible(false);
        MainMenuApp v = new MainMenuApp();
        v.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_goBackButtonClicked

    private void showByExperienceClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showByExperienceClicked
       
        String years = JOptionPane.showInputDialog("Ingrese la cantidad de años de experiencia que busca:");
        
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        
        for(int i=0; i < numberOfResults; i++){
            
            String yearsToFind = array.get(i).yearsOfExperience;
            
            if(years.equals(yearsToFind)){
            
            data[i][0] = String.valueOf(i);
            data[i][1] = array.get(i).name + " " + array.get(i).lastName;
            data[i][2] = array.get(i).profession;
            data[i][3] = array.get(i).yearsOfExperience;
            data[i][4] = array.get(i).age;
            data[i][5] = array.get(i).email;
            
            }
            
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
        
    }//GEN-LAST:event_showByExperienceClicked

    private void showByAgeClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showByAgeClicked
        String years = JOptionPane.showInputDialog("Ingrese la cantidad de años de edad que busca:");
        
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        
        for(int i=0; i < numberOfResults; i++){
            
            String yearsToFind = array.get(i).age;
            
            if(years.equals(yearsToFind)){
            
            data[i][0] = String.valueOf(i);
            data[i][1] = array.get(i).name + " " + array.get(i).lastName;
            data[i][2] = array.get(i).profession;
            data[i][3] = array.get(i).yearsOfExperience;
            data[i][4] = array.get(i).age;
            data[i][5] = array.get(i).email;
            
            }
            
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
    }//GEN-LAST:event_showByAgeClicked

    private void showByProfessionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showByProfessionMouseClicked
        
        String profession = JOptionPane.showInputDialog("Ingrese la profesión al filtrar:");
        
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        
        for(int i=0; i < numberOfResults; i++){
            
            String professionToFind = array.get(i).profession;
            
            if(profession.equals(professionToFind)){
            
            data[i][0] = String.valueOf(i);
            data[i][1] = array.get(i).name + " " + array.get(i).lastName;
            data[i][2] = array.get(i).profession;
            data[i][3] = array.get(i).yearsOfExperience;
            data[i][4] = array.get(i).age;
            data[i][5] = array.get(i).email;
            
            }
            
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
        
    }//GEN-LAST:event_showByProfessionMouseClicked

    private void showByHigherExperienceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showByHigherExperienceMouseClicked
             
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][6];
        int mayor = 0, id = 0;
        
        Persona aspirante = null;

        for(int i=0; i < numberOfResults; i++){
            
            String number = array.get(i).yearsOfExperience;
            int numberToFind = Integer.parseInt(number);
            
            if(numberToFind > mayor){
                mayor = numberToFind;
                aspirante = array.get(i);
                id = i;
            }
        }
        
        if(aspirante != null){
            data[0][0] = String.valueOf(id);
            data[0][1] = aspirante.name + " " + aspirante.lastName;
            data[0][2] = aspirante.profession;
            data[0][3] = aspirante.yearsOfExperience;
            data[0][4] = aspirante.age;
            data[0][5] = aspirante.email;
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));
           
    }//GEN-LAST:event_showByHigherExperienceMouseClicked

    private void showByYoungerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showByYoungerMouseClicked

        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();

        String nombreColumnas [] = {"Id","Nombre","Profesión", "Años de experiencia", "Edad", "Correo"};
        String data[][] = new String[numberOfResults][5];
        int menor = 100, id = 0;
        
        Persona aspirante = null;

        for(int i=0; i < numberOfResults; i++){
            
            String number = array.get(i).age;
            int numberToFind = Integer.parseInt(number);
            
            if(numberToFind < menor){
                menor = numberToFind;
                aspirante = array.get(i);
                id = i;
            }
        }
        
        if(aspirante != null){
            data[0][0] = String.valueOf(id);
            data[0][1] = aspirante.name + " " + aspirante.lastName;
            data[0][2] = aspirante.profession;
            data[0][3] = aspirante.yearsOfExperience;
            data[0][4] = aspirante.age;
            data[0][5] = aspirante.email;
        }
        
        jTable1.setModel(new DefaultTableModel(data, nombreColumnas));

       
    }//GEN-LAST:event_showByYoungerMouseClicked

    private void showCompleteInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showCompleteInfoMouseClicked

        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int seleccionar = jTable1.rowAtPoint(evt.getPoint());
        
        text1.setText("");
        
        text1.append("Nombre completo: " + array.get(seleccionar).name + array.get(seleccionar).lastName);
        text1.append("\n\nCorreo electronico: " + array.get(seleccionar).email);
        text1.append("\n\nNumero de telefono: " + array.get(seleccionar).phoneNumber);
        text1.append("\n\nEdad: " + array.get(seleccionar).age);
        text1.append("\n\nCedula de ciudadania: " + array.get(seleccionar).idNumber);
        text1.append("\n\nGenero: " + array.get(seleccionar).gender);
        text1.append("\n\nProfesion: " + array.get(seleccionar).profession);
        text1.append("\n\nAños de experiencia: " + array.get(seleccionar).yearsOfExperience);
        text1.append("\n\nCorreo electronico: " + array.get(seleccionar).email);
        text1.append("\n\nLugar de educacion: " + array.get(seleccionar).educationPlace);
        text1.append("\n\nGrado: " + array.get(seleccionar).degree);
        text1.append("\n\nInicio de educacion: " + array.get(seleccionar).startDateDegree);
        text1.append("\n\nFinalizacion de educacion: " + array.get(seleccionar).endDateDegree);
        text1.append("\n\nUltima compañia: " + array.get(seleccionar).lastCompany);
        text1.append("\n\nFecha inicio ultimo trabajo: " + array.get(seleccionar).startLastJob);
        text1.append("\n\nFecha finalizacion ultimo trabajo: " + array.get(seleccionar).endLastJob);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_showCompleteInfoMouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

    private void deleteByAgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteByAgeMouseClicked
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        int numberOfResults = array.size();
        
        String age = JOptionPane.showInputDialog("Ingrese la edad minima de experiencia:");
        int ageToFilter = Integer.parseInt(age);
        
        for(int i=0; i < numberOfResults; i++){
            
            String number = array.get(i).yearsOfExperience;
            int numberToFind = Integer.parseInt(number);
            
            if(numberToFind < ageToFilter){
               array.remove(i);
            }
        }
        
    }//GEN-LAST:event_deleteByAgeMouseClicked

    private void hireButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hireButtonMouseClicked
        
        AddCV addcv = new AddCV();
        ArrayList<Aspirante> array = AddCV.listaAspirantes;
        
        text2.setText("");
        
        String id = JOptionPane.showInputDialog("Id del aspirante a contratar: ");
        int idToFilter = Integer.parseInt(id);
        
        text2.append("El aspirante " + array.get(idToFilter).name + " " + array.get(idToFilter).lastName +" fue contratado");
        array.remove(idToFilter);
        
    }//GEN-LAST:event_hireButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Results.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Results().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JButton deleteByAge;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton goBackButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton hireButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton showAllButton;
    private javax.swing.JButton showByAge;
    private javax.swing.JButton showByExperience;
    private javax.swing.JButton showByHigherExperience;
    private javax.swing.JButton showByName;
    private javax.swing.JButton showByProfession;
    private javax.swing.JButton showByYounger;
    private javax.swing.JButton showCompleteInfo;
    private javax.swing.JTextArea text1;
    private javax.swing.JTextArea text2;
    // End of variables declaration//GEN-END:variables

}
